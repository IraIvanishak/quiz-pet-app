// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: quizes.sql

package dbs

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const insertResult = `-- name: InsertResult :exec
INSERT INTO 
    usersresults (sessionid, results)
VALUES 
    ($1, $2)
ON CONFLICT 
    (sessionid)
DO UPDATE SET 
    results = $2
`

type InsertResultParams struct {
	Sessionid uuid.UUID
	Results   pqtype.NullRawMessage
}

func (q *Queries) InsertResult(ctx context.Context, arg InsertResultParams) error {
	_, err := q.db.ExecContext(ctx, insertResult, arg.Sessionid, arg.Results)
	return err
}

const questionsByTestID = `-- name: QuestionsByTestID :many
SELECT 
    question_text, 
    options 
FROM 
    questions 
WHERE 
    test_id = $1
`

type QuestionsByTestIDRow struct {
	QuestionText sql.NullString
	Options      pqtype.NullRawMessage
}

func (q *Queries) QuestionsByTestID(ctx context.Context, testID int32) ([]QuestionsByTestIDRow, error) {
	rows, err := q.db.QueryContext(ctx, questionsByTestID, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuestionsByTestIDRow
	for rows.Next() {
		var i QuestionsByTestIDRow
		if err := rows.Scan(&i.QuestionText, &i.Options); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const quizeByID = `-- name: QuizeByID :one
SELECT 
    title, 
    description 
FROM 
    tests 
WHERE 
    id = $1
`

type QuizeByIDRow struct {
	Title       string
	Description string
}

func (q *Queries) QuizeByID(ctx context.Context, id int32) (QuizeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, quizeByID, id)
	var i QuizeByIDRow
	err := row.Scan(&i.Title, &i.Description)
	return i, err
}

const quizesAll = `-- name: QuizesAll :many
SELECT 
    id, 
    title, 
    description 
FROM 
    tests
`

type QuizesAllRow struct {
	ID          int32
	Title       string
	Description string
}

func (q *Queries) QuizesAll(ctx context.Context) ([]QuizesAllRow, error) {
	rows, err := q.db.QueryContext(ctx, quizesAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuizesAllRow
	for rows.Next() {
		var i QuizesAllRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resultsByID = `-- name: ResultsByID :one
SELECT 
    results 
FROM 
    usersresults 
WHERE 
    sessionid = $1
`

func (q *Queries) ResultsByID(ctx context.Context, sessionid uuid.UUID) (pqtype.NullRawMessage, error) {
	row := q.db.QueryRowContext(ctx, resultsByID, sessionid)
	var results pqtype.NullRawMessage
	err := row.Scan(&results)
	return results, err
}
